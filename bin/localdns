#!/usr/bin/env python

import re
import os
import sys
import json
import argparse
import socket
import random
import fcntl
import struct
import urllib2
import netifaces

parser = argparse.ArgumentParser(prog = 'localdns')
parser.add_argument('--conf', '-c', required=True)
OPTS = parser.parse_args()

CONF = json.loads(open(OPTS.conf).read())

HOSTS_FILE_BEGINNER = "####### LocalDNS AutoGenerated #######"
HOSTS_FILE_ENDER = "####### END LocalDNS #######"

# done
def get_ip(ifname):
    return netifaces.ifaddresses(ifname)[netifaces.AF_INET][0]['addr']

# done
def update_saved_ip():
    new_ip = get_ip()
    req = urllib2.Request(CONF['server'], json.dumps( {
        'new_ip': new_ip,
        'hostname': socket.gethostname().split('.')[0],
        'key': CONF['key'],
    } ))
    u = urllib2.urlopen(req)
    return u.getcode()

# done
def get_known_hosts():
    """
    input = [
        ['10.34.2.234', [
            'adr-ego', 
            'adr-ego.local', 
            'adr-ego.adr.local'
            ]
        ],
        ... etc ...
    ]
    
    output are lines for a hosts file
    """
    req = urllib2.Request(CONF['server'], headers={
        'Accept': 'application/json',
    })
    u = urllib2.urlopen(req)
    new_hosts = json.loads(u.read())
    ret = []
    for ip, hosts in new_hosts:
        hosts = [re.sub('[^A-Za-z0-9_-]', '', h) for h in hosts]
        ip_match = re.match('([0-9]{1,3}\.){3}\.[0-9]{1,3}', ip)
        if not ip_match:
            continue
        ret.append("%s\t%s" % (ip, " ".join(hosts)))
    return "\n".join(ret) + "\n"

# done
def generate_key():
    chars = range(33, 127)
    key = "".join([chr(random.choice(chars)) for n in xrange(64)])
    return key

# done
def check_key():
    if 'key' not in CONF:
        new_key = generate_key()
        req = urllib2.Request(CONF['server'], json.dumps( {
            'hostname': socket.gethostname().split('.')[0],
            'new_key': new_key,
        } ))
        u = urllib2.urlopen(req)
        if u.getcode() == 200:
            CONF['key'] = new_key
            save_conf()

# done
def save_conf():
    conf_fd = open(OPTS.conf, 'w')
    conf_fd.write(json.dumps(CONF))
    conf_fd.close()

# done
def write_hosts():
    hosts_data = open(CONF['hosts-file']).readlines()
    new_file = []
    our_section = False
    for line in hosts_data:
        if line.strip() == HOSTS_FILE_BEGINNER:
            our_section = True
            new_file.append(HOSTS_FILE_BEGINNER+"\n")
            new_file.append( get_known_hosts() )
            new_file.append(HOSTS_FILE_ENDER+"\n")
        elif line.strip() == HOSTS_FILE_ENDER:
            our_section = False
            continue
        
        if not our_section:
            new_file.append(line)
    
    #hosts_fd = open(CONF['hosts-file'], 'w')
    hosts_fd = sys.stdout
    hosts_fd.write("".join(new_file))
    hosts_fd.close()

if __name__ == '__main__':
    check_key()
    
    #update_saved_ip()
    
    write_hosts()

